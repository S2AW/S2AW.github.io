---
/*
  Travel page — world map + featured trips grid
  Variant: NO globe outline, rectangular background only.
  - Removed the sphere path + clip
  - Pan + button zoom (wheel disabled)
*/

const SITE_TITLE = "Stephen — Travel";
const SITE_DESCRIPTION = "World map, featured trips, and a grid of journeys.";

type Trip = {
  slug: string;
  title: string;
  where: string;
  country?: string;
  cover: string;
  summary: string;
};

const TRIPS: Trip[] = [
  {
    slug: "Florence Wedding",
    title: "Florence Wedding",
    where: "Florence, Italy",
    country: "Italy",
    cover: "/images/travel/amsterdam/amsterdam-cover.jpg",
    summary: "Quick getaway to celebrate love on the vineyards",
  },
  {
    slug: "Catalonia",
    title: "Catalonia Beaches",
    where: "Catalonia, Spain",
    country: "Spain",
    cover: "/images/travel/krakow/cover.jpg",
    summary: "Summer Holiday in Spain",
  },
  {
    slug: "Porto",
    title: "Porto, Portugal",
    where: "Porto, Portugal",
    country: "Portugal",
    cover: "/images/travel/utah/cover.jpg",
    summary: "A loop through four national parks.",
  },
  {
    slug: "utah-parks-2023",
    title: "Utah Parks Road Trip",
    where: "Zion, Bryce, Arches — USA",
    country: "United States",
    cover: "/images/travel/utah/cover.jpg",
    summary: "A loop through four national parks.",
  }

];

const FEATURED = [...TRIPS];
---

<html lang="en" data-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{SITE_TITLE}</title>
    <meta name="description" content={SITE_DESCRIPTION} />
    <link rel="icon" href="/favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Inter:wght@400;500;700&display=swap"
      rel="stylesheet"
    />

    <style>
      :root {
        --bg:#fff; --sidebar:#f3f5f8; --text:#0f141b; --muted:#6b7280; --accent:#0a67ff;
        --border:#e5e7eb; --maxw:1400px; --sidebar-w:270px;
        --map-stroke:#1f2937; --map-water:#f6f9ff; --land:#f8fafc; --visited-country:#0a67ff;
      }
      *{box-sizing:border-box}
      html,body{margin:0;padding:0;background:var(--bg);color:var(--text);
        font:16px/1.6 Inter,system-ui,-apple-system,"Segoe UI",Roboto,Arial,sans-serif;}
      img{max-width:100%;display:block}
      a{color:var(--accent);text-decoration:none} a:hover{text-decoration:underline}

      .site{display:grid;grid-template-columns:1fr;min-height:100dvh}
      @media(min-width:800px){.site{grid-template-columns:var(--sidebar-w) 1fr}}

      aside{background:var(--sidebar);border-right:1px solid var(--border)}
      .aside-inner{position:sticky;top:0;height:100dvh;display:grid;grid-template-rows:auto 1fr auto;padding:28px 22px;gap:18px;max-width:var(--sidebar-w);margin:0 auto}
      .avatar{width:160px;height:160px;border-radius:999px;overflow:hidden;border:2px solid #fff;box-shadow:0 6px 22px rgba(0,0,0,.06);margin:0 auto}
      .avatar img{width:100%;height:100%;object-fit:cover;object-position:50% 35%}
      .who{text-align:center;margin-top:8px}
      .name{font:700 1.35rem/1.2 "Playfair Display",Georgia,serif;color:#111827}
      .role{font-size:.9rem;color:var(--accent)} .loc{color:var(--muted);font-size:.85rem}
      .sidenav{list-style:none;margin:18px 0;padding:0;display:grid;gap:10px}
      .sidenav a{color:#0f141b;font-weight:600}.sidenav a.active,.sidenav a:hover{color:var(--accent)}
      .copyright{color:var(--muted);font-size:.8rem}

      main{display:grid;align-content:start}
      .content{max-width: var(--maxw);margin-left: 0;margin-right: auto; padding: clamp(12px, 2vw, 28px); padding-left: clamp(12px, 2vw, 28px);}
      .headline{font-family:"Playfair Display",Georgia,serif;font-size:clamp(2.6rem,5vw,3.8rem);line-height:1.08;margin:8px 0 0}
      .subtext{color:#374151;max-width:65ch;margin:8px 0 22px;font-size:1.05rem}

      /* Map card with rectangular background (no globe outline) */
      .map-wrap{
        margin-top:10px;
        background:linear-gradient(180deg,#f8fbff,#fff);
        border:1px solid var(--border);
        border-radius:16px;
        padding:12px;
        position:relative;
        height:600px;
        overflow:hidden; /* keep map inside rounded card */
      }
      /* The SVG supplies the "ocean" via its background; no sphere path, no oval */
      .map svg{
        width:100%;
        height:100%;
        border-radius:12px;
        background: var(--map-water);
        display:block;
      }
      .zoom-ui{position:absolute;right:16px;bottom:16px;display:flex;flex-direction:column;gap:8px}
      .zoom-ui button{border:1px solid var(--border);background:#fff;width:40px;height:40px;border-radius:10px;font-weight:700;cursor:pointer;
        box-shadow:0 4px 14px rgba(0,0,0,.08);}
      .zoom-ui button:hover{background:#f1f1f1}

      h2.section-title{font-family:"Playfair Display",Georgia,serif;font-size:1.8rem;margin:2rem 0 1rem;color:#111827}

      .grid{display:grid;gap:18px;grid-template-columns:repeat(1,1fr)}
      @media(min-width:720px){.grid{grid-template-columns:repeat(3,1fr)}}
      @media(min-width:1100px){.grid{grid-template-columns:repeat(5,1fr)}}
      .card{border:2px solid #111827;border-radius:14px;overflow:hidden;background:#fff}
      .cover{aspect-ratio:16/10;width:100%;object-fit:cover;background:#f3f4f6}
      .body{padding:10px}
      .title{font-weight:700;color:#111827}
      .subtitle{color:#6b7280;font-size:.9rem}

      @media(max-width:959px){aside{border-right:none;border-bottom:1px solid var(--border)}.aside-inner{position:static;height:auto;padding:16px}}
    </style>
  </head>

  <body>
    <div class="site">
      <aside>
        <div class="aside-inner">
          <div>
            <div class="avatar"><img src="/images/home/portrait.jpg" alt="Stephen portrait" /></div>
            <div class="who">
              <div class="name">Stephen</div>
              <a class="role" href="/">Strategist &amp; Aspiring Autodidact</a>
              <div class="loc">Netherlands / United States</div>
            </div>
          </div>

          <nav>
            <ul class="sidenav">
              <li><a href="/">Home</a></li>
              <li><a href="/about/">About</a></li>
              <li><a href="/education/">Education</a></li>
              <li><a href="/experience/">Experience</a></li>
              <li><a href="/projects/">Projects</a></li>
              <li><a href="/photography/">Photography</a></li>
              <li><a class="active" href="/travel/">Travel</a></li>
              <li><a href="/thoughts/">Thoughts</a></li>
              <li><a href="mailto:stephen@example.com">Contact</a></li>
            </ul>
          </nav>

          <div class="copyright">© {new Date().getFullYear()} Stephen · <a href="https://github.com/S2AW" target="_blank" rel="noopener">GitHub</a></div>
        </div>
      </aside>

      <main>
        <div class="content">
          <h1 class="headline">Travel</h1>
          <p class="subtext">World map, featured trips, and a grid of journeys.</p>

          <section class="map-wrap">
            <div class="map" id="map"></div>
            <div id="mapError" style="display:none;padding:10px;color:#b91c1c"></div>
            <div class="zoom-ui">
              <button id="zoomIn" type="button">+</button>
              <button id="zoomOut" type="button">−</button>
              <button id="resetView" type="button">↺</button>
            </div>
          </section>

          <h2 class="section-title">Featured Trips</h2>

          <div class="grid" id="tripGrid">
            {FEATURED.map((t) => (
              <article class="card" id={t.slug}>
                <img class="cover" src={t.cover} alt={`${t.title} cover`} />
                <div class="body">
                  <div class="title">{t.country ?? t.where}</div>
                  <div class="subtitle">{t.title}</div>
                </div>
              </article>
            ))}
          </div>
        </div>
      </main>
    </div>

    <!-- Map script -->
    <script type="module" is:inline>
      import * as d3 from "https://unpkg.com/d3@7?module";

      const mapEl = document.getElementById("map");
      const mapError = document.getElementById("mapError");

      const width = Math.max(320, mapEl.clientWidth);
      const height = Math.max(400, Math.round(width * 0.55));
      const svg = d3.select(mapEl).append("svg").attr("viewBox", `0 0 ${width} ${height}`);

      // Natural Earth projection fitted with padding
      const projection = d3.geoNaturalEarth1().fitExtent([[12, 12], [width - 12, height - 12]], { type: "Sphere" });
      const path = d3.geoPath(projection);

      const CSS = (n) => getComputedStyle(document.documentElement).getPropertyValue(n).trim();
      const COLOR_OUTLINE = CSS("--map-stroke") || "#1f2937";
      const COLOR_LAND = CSS("--land") || "#f8fafc";
      const COLOR_VISITED = CSS("--visited-country") || "#0a67ff";

      // Group for features (no clip — we rely on the card's overflow:hidden and the projection bounds)
      const g = svg.append("g");

      const norm = (s) => String(s ?? "").trim().toLowerCase();
      const nameOf = (f) => String(f?.properties?.name ?? "").trim();

      try {
        const [worldmap, visited] = await Promise.all([
          fetch("/data/worldmap.geojson").then(r => r.json()),
          fetch("/data/visited.json").then(r => r.json())
        ]);

        const visitedNames = new Set((visited.names || []).filter(Boolean).map(norm));

        g.selectAll("path.feature")
          .data(worldmap.features)
          .join("path")
          .attr("class", "feature")
          .attr("d", path)
          .attr("fill", d => visitedNames.has(norm(nameOf(d))) ? COLOR_VISITED : COLOR_LAND)
          .attr("fill-opacity", d => visitedNames.has(norm(nameOf(d))) ? 0.85 : 1)
          .attr("stroke", COLOR_OUTLINE)
          .attr("stroke-width", 0.5)
          .append("title")
          .text(d => nameOf(d));
      } catch (err) {
        console.error(err);
        mapError.style.display = "block";
        mapError.textContent = "Failed to load map data: " + (err?.message || err);
      }

      // Pan + button zoom (wheel disabled)
      const zoom = d3.zoom()
        .scaleExtent([1, 8])
        .filter(ev => ev.type !== "wheel" && ev.type !== "dblclick")
        .on("zoom", ev => g.attr("transform", ev.transform));

      svg.call(zoom).on("wheel.zoom", null);

      document.getElementById("zoomIn").onclick = () => svg.transition().duration(200).call(zoom.scaleBy, 1.3);
      document.getElementById("zoomOut").onclick = () => svg.transition().duration(200).call(zoom.scaleBy, 1 / 1.3);
      document.getElementById("resetView").onclick = () => {svg.transition().duration(300).call(zoom.transform, d3.zoomIdentity);};
    </script>
  </body>
</html>
